// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TFT.API.Business.Model;

#nullable disable

namespace TFT.Repository.Migrations
{
    [DbContext(typeof(Entities))]
    partial class EntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TFT.API.Business.Model.Actor", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("ActorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("TFT.API.Business.Model.ActorAgreement", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("ActorID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Honorarium")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("IsAccepted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInvited")
                        .HasColumnType("bit");

                    b.Property<long>("MovieID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "ActorID" }, "IX_FK_ActorActorAgreement");

                    b.HasIndex(new[] { "MovieID" }, "IX_FK_ActorAgreementMovie");

                    b.ToTable("ActorAgreements");
                });

            modelBuilder.Entity("TFT.API.Business.Model.Director", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("DirectorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("TFT.API.Business.Model.Genre", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("TFT.API.Business.Model.GenreMovie", b =>
                {
                    b.Property<long>("Genres_ID")
                        .HasColumnType("bigint");

                    b.Property<long>("Movies_ID")
                        .HasColumnType("bigint");

                    b.HasKey("Genres_ID", "Movies_ID");

                    b.HasIndex(new[] { "Movies_ID" }, "IX_FK_GenreMovie_Movie");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("TFT.API.Business.Model.Movie", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DirectorID")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Duration")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EndProduction")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartProduction")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "DirectorID" }, "IX_FK_MovieDirector");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("TFT.API.Business.Model.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TFT.API.Business.Model.ActorAgreement", b =>
                {
                    b.HasOne("TFT.API.Business.Model.Actor", "Actor")
                        .WithMany("ActorAgreements")
                        .HasForeignKey("ActorID")
                        .IsRequired()
                        .HasConstraintName("FK_ActorActorAgreement");

                    b.HasOne("TFT.API.Business.Model.Movie", "Movie")
                        .WithMany("ActorAgreements")
                        .HasForeignKey("MovieID")
                        .IsRequired()
                        .HasConstraintName("FK_ActorAgreementMovie");

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("TFT.API.Business.Model.GenreMovie", b =>
                {
                    b.HasOne("TFT.API.Business.Model.Genre", "Genres")
                        .WithMany("GenreMovies")
                        .HasForeignKey("Genres_ID")
                        .IsRequired()
                        .HasConstraintName("FK_GenreMovie_Genre");

                    b.HasOne("TFT.API.Business.Model.Movie", "Movies")
                        .WithMany("GenreMovies")
                        .HasForeignKey("Movies_ID")
                        .IsRequired()
                        .HasConstraintName("FK_GenreMovie_Movie");

                    b.Navigation("Genres");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("TFT.API.Business.Model.Movie", b =>
                {
                    b.HasOne("TFT.API.Business.Model.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorID")
                        .IsRequired()
                        .HasConstraintName("FK_MovieDirector");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("TFT.API.Business.Model.Actor", b =>
                {
                    b.Navigation("ActorAgreements");
                });

            modelBuilder.Entity("TFT.API.Business.Model.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("TFT.API.Business.Model.Genre", b =>
                {
                    b.Navigation("GenreMovies");
                });

            modelBuilder.Entity("TFT.API.Business.Model.Movie", b =>
                {
                    b.Navigation("ActorAgreements");

                    b.Navigation("GenreMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
